# coding: utf-8
def init_array(num):
    arr = [i for i in range(1, num + 1)]
    return arr


def Josephus(arr, k):
    offset = 0  # 上一轮还没报数的偏移值
    j = 0  # 标记每一轮最后挂掉的那个的位置
    b = []  # 放尸体，挂掉的数据扔进来这里
    while len(arr) >= k:
        for i in range(0, len(arr) / k):
            j = (i * k + k - offset - i - 1) % len(arr)  # 标记下标
            b.append(arr[j])  # 记录死亡名单
            del arr[j]  # 把它挂掉
            print arr, b  # 打印看看，看看有没有挂错

        offset = len(arr) - j
        print len(arr), offset
        print "_" * 30


def test1():
    arr = init_array(20)
    k = 7
    print arr, k
    Josephus(arr, k)


def test2():
    arr = init_array(10)
    k = 3
    print arr, k
    Josephus(arr, k)


if __name__ == "__main__":
    # test1()
    test2()

'''
test1() results  第三轮，最后死掉的不应该是4，而是5.但是此后如果以4为标准，就没错了。

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] 7
[1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] [7]
[1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20] [7, 14]
18 6
______________________________
[2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20] [7, 14, 1]
[2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20] [7, 14, 1, 9]
16 10
______________________________
[2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20] [7, 14, 1, 9, 17]
[2, 3, 5, 6, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20] [7, 14, 1, 9, 17, 4]
14 12
______________________________
[2, 3, 5, 6, 8, 10, 11, 12, 15, 16, 18, 19, 20] [7, 14, 1, 9, 17, 4, 13]
[3, 5, 6, 8, 10, 11, 12, 15, 16, 18, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2]
12 12
______________________________
[3, 5, 6, 8, 10, 11, 15, 16, 18, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2, 12]
11 5
______________________________
[3, 6, 8, 10, 11, 15, 16, 18, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2, 12, 5]
10 9
______________________________
[3, 6, 8, 10, 11, 15, 16, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2, 12, 5, 18]
9 2
______________________________
[3, 6, 8, 10, 15, 16, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2, 12, 5, 18, 11]
8 4
______________________________
[3, 6, 10, 15, 16, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2, 12, 5, 18, 11, 8]
7 5
______________________________
[3, 10, 15, 16, 19, 20] [7, 14, 1, 9, 17, 4, 13, 2, 12, 5, 18, 11, 8, 6]
6 5
______________________________

Process finished with exit code 0



'''

'''
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 3
[1, 2, 4, 5, 6, 7, 8, 9, 10] [3]
[1, 2, 4, 5, 7, 8, 9, 10] [3, 6]
[1, 2, 4, 5, 7, 8, 10] [3, 6, 9]
7 1
______________________________
[1, 4, 5, 7, 8, 10] [3, 6, 9, 2]
[1, 4, 5, 8, 10] [3, 6, 9, 2, 7]
5 2
______________________________
[4, 5, 8, 10] [3, 6, 9, 2, 7, 1]
4 4
______________________________
[4, 5, 10] [3, 6, 9, 2, 7, 1, 8]
3 1
______________________________
[4, 10] [3, 6, 9, 2, 7, 1, 8, 5]
2 1
______________________________

Process finished with exit code 0

'''